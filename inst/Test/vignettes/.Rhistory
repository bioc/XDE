n
y
n
n
n
n
n
n
n
y
n
n
n
openVignette
openVignette(package="Biobase")
0
openVignette(package="ggbio")
library(ggbio)
0
library(ggbio)
openVignette(package="ggbio")
1
library(Gviz)
0
biocLite("Gviz")
n
library(Gviz)
itrack
0
atrack
data(cpgIslands)
cpgIslands
knownGenes
str(knownGenes)
data(geneModels)
geneModels
class(geneModels)
 GeneRegionTrack(knownGenes)
0
0
0
?BiomartGeneRegionTrack
?plotTracks
0
0
0
graphics.off()
0
0
> > 0
0
0
0
biomTrack
str(biomTrack
)
?BiomartGeneRegionTrack
0
gr
0
str(p3)
plotTracks
biomTrack
str(biomTrack)
knownGenes
str(knownGenes)
?theme
class(p3)
showMethods("gg")
showMethods(signature="gg", package="ggplot2")
0
?showMethods
showMethods("gg", where="package:ggplot2")
?methods
methods(class="gg")
?gg
?gg-classs
?gg-class
?gg-methods
?ggplot2
?makeTranscriptDbFromUCSC
tx
gr
0
0
library(oligoClasses)
0
0
gr
grl
names(grl)
fr
rf
0
kgAlias[1:5,]
gr
gr
gr
0
tx
tx2
0
0
0
0
txchr4
txchr4
tmp
txchr4
colnames(values(txchr4))
colnames(values(tx2))
tx
tx[[1]]
names(tx)[1;5]
names(tx)[1:5]
txdb
grl
grl[[1]]
class(grl)
gr=unlist(grl)
colnames(values(gr))
0
0
gr
kgAlias[1:5,]
index
kgAlias
str(kgAlias)
gr
dim(kgAlias)
grl
tmp
tmp[[1]]
grl[[1]]
kgAlias[match(c("uc002qsd.2", "uc002qsf.1"), kgAlias[,1]),]
ids=values(grl[[1]])$tx_id
ids
ids=values(grl[[1]])$tx_name
ids
match(ids, kgAlias[,1])
match(ids, kgAlias[,2])
kgAlias[1:5,]
match(ids, kgAlias[,1])
kgAlias[match(ids, kgAlias[,1]), ]
str(geneModels)
start(biomTrack)
end(biomTrack)
start(knownGenes)
names(knownGenes)
str(geneModels)
0
?GeneRegionTrack
gtrack
0
GenomeAxisTrack(gtrack)
0
gtrack
str(gtrack)
names(gtrack)
showMethods("GeneRegionTrack", where="package:Gviz")
range(gtrack)
gr
gtrack
str(gtrack)
transcript(gtrack)
kgAlias
kgAlias[1:5,]
index
alias
grep("SLC2A9", as.character(alias))
gtrack
range(grack)
range(gtrack)
seqnames(gtrack)
txdb
?GeneRegionTrack
0
str(df)
0
0
grTrack
stacking(grTrack)
plotTracks(grTrack)
gene(trTrack)
0
0
grTrack
0
alias
grep("SLC", alias)
alias
grep("SLC", alias)
itrack
gtrack
0
0
grack
gtrack
itrack
range(biomTrack)
start(biomTrack)/1e6
range(start(biomTrack)/1e6)
gtrack
range(p3)
0
limits(p3)
?DataTrack
biocLite("TxDb.Hsapiens.UCSC.hg18.knownGene")
n
0
str(genesymbol)
?genesymbol
library(biovizBase)
?genesymbol
head(genesymbol)
length(genesymbol)
genesymbol[["SLC2A9"]]
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
n
metadata(genesymbol)
?genesymbol
?autoplot
txdb
as(txdb, "GRanges")
0
GRanges(txdb)
0
class(txdb)
?TrascriptDb
tx.gr
genesymbol
cnv.gr
tmp
tx.gr
kgAlias
0
tx.gr
snp.gr[gwas.hit,]
index
tx.gr
0
p1
tx.grl
0
0
kgAlias <- read.delim("~/Downloads/kgAlias")
str(kgAlias)
kgAlias[1:10,]
grep("SLC2A9", kgAlias[,2])
kgAlias[grep("SLC2A9", kgAlias[,2]),]
?geom_text
?library
q()
n
.libPaths(.devel)
str(commonParams
)
setwd("../../")
?package.skeleton
package.skeleton(name="Test", list=NULL)
0
package.skeleton(name="Test", list=ls())
library(Test)
reload("Test")
q()
n
Sweave("crlmmDownstream.Rnw")
0
Sweave("crlmmDownstream.Rnw")
0
.libPaths(.devel)
Sweave("crlmmDownstream.Rnw")
fig
trace(xyplotLrrBaf, browser)
	fig <- xyplotLrrBaf(rd, oligoSet,
			    frame=200e3,
			    panel=xypanelBaf,
			    scales=list(x="free"),
			    par.strip.text=list(cex=0.9),
			    cex=0.4,
			    state.col="black",
			    state.cex=0.8,
			    pch=21)
	if(is(rd, "GRangesList")) {
		rd <- stack(rd)
		index <- seq_len(length(rd))
	} else {
		if(is(rd, "GRanges")) index <- seq_len(length(rd))
		if(is(rd, "RangedDataCNV")) index <- seq_len(nrow(rd))
	}
	if(any(is.na(position(object)))) stop("NA values not permitted in position(object)")
	i <- NULL
	df <- foreach(i=index, .combine="rbind") %do% dataFrameFromRange(range=rd[i, ],
			       object=object, frame=frame, range.index=i)
str(df)
		xyplot(cn~x|range, data=df,
		       baf=df$baf,
		       is.snp=df$is.snp, range=rd, ...)
Q
q()
n
getwd()
.libPaths(.devel)
Sweave("crlmmDownstream.Rnw")
trace(VanillaICE:::generatorFun, browser)
res <- hmm(oligoSet, p.hom=0.1, nupdates=5, TAUP=1e8)
str(b)
	S <- length(cnStates)
	nc <- ncol(r)
	b <- b[is.snp, , drop=FALSE]
	nr <- nrow(r)
	nb <- nrow(b)
	np.index <- which(!is.snp)
	names(prOutlierBAF)[1] <- "prOutlier"
	CHR <- paste("chr", oligoClasses::integer2chromosome(chrom), sep="")
	##
	## params for copy number
	sds <- apply(r, 2, mad, na.rm=TRUE)
	if(center) r <- centerCopyNumber(r, is.snp) + cnStates[normalIndex]
str(is.snp)
str(b[,1])
sdA
hist(b[,1], breaks=100)
sd(b[b[,1] < 0.25, 1], na.rm=T)
sdA
sdA
sdsBAF
Q
reload("VanillaICE")
Sweave("crlmmDownstream.Rnw")
tools::texi2pdf("crlmmDownstream.tex")
q()
n
.libPaths(.devel)
getwd()
list.files()
more phi.txt
0
?read.delim
dim(phi)
phi[1:5,]
range(phi[,2])
nrow(phi)
3591*3
3592*3
nrow(phi)
nrow(phi)
str(phi)
str(phi)
str(phi)
str(sigma2)
10776/3
str(phi2)
str(phi2)
length(as.numeric(phi2))
length(as.numeric(phi))
dim(phi2)
str(sigma2)
dim(phi)
str(x)
)
str(x)
175*G
G
359200/G
359200/225
.libPaths(.devel)
biocLite("ggbio")
source("http://www.bioconductor.org/biocLite.R")
biocLite("ggbio", type="source")
a
reload("Test")
0
0
4
.libPaths(.devel)
3
.libPaths(.devel)
3
.libPaths(.devel)
library(Test)
G <- 3592
tmp <- .C("initializeParams", iterations=1L,
	  G=3592L,
	  Q=3L)
3
.libPaths(.devel)
tmp <- .C("initializeParams", iterations=1L,
	  G=3592L,
	  Q=3L)
.libPaths(.devel)
library(Test)
G <- 3592
tmp <- .C("initializeParams",
	  nIt=1L)
reload("Test")
 q()
n
.libPaths(.devel)
reload("Test")
reload("Test")
sessionInfo()
setwd("/Users/rscharpf/Downloads/affySNP6")
filelist
filelist
fileList <- paste("./data/raw/", pheno$FileName, sep="")
filelist
list.files("../data")
list.files("data")
list.files("data/raw")
pheno$FileName
paste("./data/raw/", pheno$FileName, sep="")
fileList
0
list.files("objs")
cnSet
library(crlmm)
delete
ldPath()
myBatch
0
celfileName
2
cnSet
class(cnSet)
Q
reload("crlmm")
2
Q
reload("crlmm")
0
sessionInfo()
cnSet
class(cnSet)
ok
cnSet
ok
Q
reload_pkg("crlmm")
q()
n
.libPaths(.devel)
0
3
strata
str(snp.index)
str(fns.noflags)
str(snp.index)
Q
q()
n
0
.libPaths(.devel)
cnSet22
as(cnSet22, "oligoSnpSet")
0
q()
n
.libPaths(.devel)
0
1
.libPaths(.devel)
rowQ
help.search("rowQ")
?gsub
library("tools")
vigSrc = list.files(pattern = "Rnw$",
                    system.file("doc", package = "MiniumDistance"),

                    full.names = TRUE)
vigSrc
for (v in vigSrc) Stangle(v)
getwd()
list.files()
v
vigSrc
vigSrc=list.files(pattern="RNW$", system.file("vignettes", package="MinimumDistance")
)
vigSrc
vigSrc=list.files(pattern="Rnw$", system.file("vignettes", package="MinimumDistance"))
vigSrc
.libPaths()
vigSrc=list.files(pattern="Rnw$", system.file("doc", package="MinimumDistance"))
vigSrc
Stangle(vigSrc)
0
vigSrc
vigSrc=list.files(pattern="Rnw$", system.file("doc", package="MinimumDistance"), full.names=TRUE)
Stangle(vigSrc)
library(MinimumDistance)
library(oligoClasses)
isDenovo(c(222, 221, 211, 223, 233))
data(map.segs)
table(isDenovo(state(map.segs)))
state(map.segs)
.libPaths()
library(oligoClasses)
foreach::registerDoSEQ()
path <- system.file("extdata", package="MinimumDistance")
fnames <- list.files(path, pattern=".txt")
ped <- Pedigree(fatherIds=fnames[1], motherIds=fnames[2],
		offspringIds=fnames[3])
map.segs <- callDenovoSegments(path=path,
			       ext="",
			       pedigreeData=ped,
			       cdfname="human610quadv1b",
			       chromosome=1,
			       segmentParents=FALSE,
                               prOutlierBAF=list(initial=1e-3, max=0.01,
			       maxROH=1e-3),
			       genome="hg18")
map.segs
map.segs
data(map.segs)
map.segs
getwd()
setwd("/Users/rscharpf/Software/MinimumDistance/vignettes/")
Sweave("MinimumDistance.Rnw")
tools::texi2pdf("MinimumDistance.tex")
?tryCatch
q()
n
